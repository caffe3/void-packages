_cudaver=12.6
pkgname=python3-torch-nightly
version=20250119
revision=1
_commit=8cc415774f47b5a50077f72ea493b71b8101e48d
build_style=python3-pep517
hostmakedepends="python3-setuptools python3-wheel python3-requests python3-astunparse
 cmake ninja pkg-config git cuda-compiler protobuf"
makedepends="python3-devel python3-pybind11
 python3-numpy python3-yaml python3-typing_extensions python3-networkx python3-triton
 glog-devel gflags-devel benchmark-devel
 eigen sleef-devel cpuinfo-torch-git-devel openblas-devel onednn-devel
 fp16-git gloo-git-devel protobuf-devel
 libopencv4-devel openmpi-devel libuv-devel python3-numpy ffmpeg-devel
 libnuma-devel openmpi-devel
 cuda-nvtx cuda-libraries-devel libcudnn9-devel nccl-devel cuda-cupti-devel cuda-nvml-devel"
depends="python3-numpy python3-yaml python3-typing_extensions python3-networkx
 python3-sympy python3-Jinja2 python3-filelock"
short_desc="Tensor computation framework with GPU acceleration (nightly, CUDA)"
maintainer="Tai Chi Minh Ralph Eastwood <caffe@disroot.org>"
license="BSD-3-Clause"
homepage="https://pytorch.org/"
nostrip=yes
nocross=yes

build_options="sm_50 sm_52 sm_53 sm_60 sm_61 sm_62 sm_70 sm_72 sm_80 sm_86 sm_87 sm_89 sm_90 sm_90a"
build_options_default="sm_80 sm_86 sm_89 sm_90 sm_90a"

do_fetch() {
  git clone https://github.com/pytorch/pytorch ${wrksrc}
  cd ${wrksrc}
  git checkout ${_commit}
  for tp in kineto fmt googletest onnx opentelemetry-cpp pocketfft nlohmann flatbuffers cpp-httplib cutlass; do
    git submodule update --init --recursive third_party/$tp
  done
}

pre_configure() {
  vsed -i 's/USE_SYSTEM_ONNX ON/USE_SYSTEM_ONNX OFF/' CMakeLists.txt
  vsed -i 's/USE_SYSTEM_XNNPACK ON/USE_SYSTEM_XNNPACK OFF/' CMakeLists.txt
  vsed -i 's/USE_SYSTEM_PSIMD ON/USE_SYSTEM_PSIMD OFF/' CMakeLists.txt
  vsed -i '/"cmake",/d' pyproject.toml
  vsed -i '/"ninja",/d' pyproject.toml
  vsed -i '/common_gpu\.h/d' binaries/inspect_gpu.cc
}

pre_build() {
  export VERBOSE=1
  export PYTORCH_BUILD_VERSION="${version}"
  export PYTORCH_BUILD_NUMBER=1

  # Build configuration
  export ATEN_NO_TEST=ON
  export BUILD_CUSTOM_PROTOBUF=OFF
  export BUILD_TEST=OFF
  export BUILD_BINARY=OFF
  export USE_FFMPEG=ON
  export USE_GFLAGS=ON
  export USE_GLOG=ON
  export USE_OBSERVERS=ON
  export USE_OPENCV=ON
  export USE_NCCL=ON
  export USE_TENSORPIPE=OFF
  export USE_SYSTEM_LIBS=ON
  export USE_CUPTI_SO=ON
  export ONNX_ML=OFF
  export USE_MKLDNN=OFF
  export USE_MKLDNN_ACL=OFF
  export USE_NNPACK=OFF
  export USE_XNNPACK=OFF
  export USE_QNNPACK=OFF
  export USE_PYTORCH_QNNPACK=OFF
  export USE_ROCM=OFF
  export USE_XPU=OFF
  export USE_FBGEMM=OFF
  export USE_FAKELOWP=OFF
  export USE_ITT=OFF
  export CAFFE2_CMAKE_BUILDING_WITH_MAIN_REPO=OFF

  # CUDA configuration
  export USE_CUDA=1
  export USE_CUDNN=1
  #export USE_CUSPARSELT=1
  #export USE_CUDSS=1
  #export USE_CUFILE=1

  export CUDA_HOME=/opt/cuda-${_cudaver}
  export CUDNN_LIB_DIR=/opt/cuda-${_cudaver}/lib
  export CUDNN_INCLUDE_DIR=/opt/cuda-${_cudaver}/include
  export TORCH_NVCC_FLAGS="-Xfatbin -compress-all"
  export TORCH_CUDA_ARCH_LIST=\
"$(vopt_if sm_50 '5.0;')"\
"$(vopt_if sm_52 '5.2;')"\
"$(vopt_if sm_53 '5.3;')"\
"$(vopt_if sm_60 '6.0;')"\
"$(vopt_if sm_61 '6.1;')"\
"$(vopt_if sm_62 '6.2;')"\
"$(vopt_if sm_70 '7.0;')"\
"$(vopt_if sm_72 '7.2;')"\
"$(vopt_if sm_80 '8.0;')"\
"$(vopt_if sm_86 '8.6;')"\
"$(vopt_if sm_87 '8.7;')"\
"$(vopt_if sm_89 '8.9;')"\
"$(vopt_if sm_90 '9.0;')"\
"$(vopt_if sm_90a '9.0a;')"
  export OVERRIDE_TORCH_CUDA_ARCH_LIST="${TORCH_CUDA_ARCH_LIST}"

  # Compiler configuration
  export CUDA_HOST_COMPILER=gcc
  export CUDAToolkit_ROOT=/opt/cuda-${_cudaver}
  export CMAKE_CUDA_COMPILER=/opt/cuda-${_cudaver}/bin/nvcc
}

post_install() {
  vlicense LICENSE

  # Fix paths
  local pyver=$($XBPS_CROSS_BASE/usr/bin/python3 -c 'import sys; print(f"{sys.version_info.major}.{sys.version_info.minor}")')
  local sitedir="usr/lib/python${pyver}/site-packages/torch"

  # Move CMake files
  vmkdir usr/lib/cmake
  mv ${DESTDIR}/${sitedir}/share/cmake/* ${DESTDIR}/usr/lib/cmake/

  # Move headers
  vmkdir usr/include
  mv ${DESTDIR}/${sitedir}/include/* ${DESTDIR}/usr/include/

  # Move and link libraries
  find ${DESTDIR}/${sitedir}/lib -type f -name "*.so*" -exec mv {} ${DESTDIR}/usr/lib/ \;

  # Create symlinks
  ln -sf /usr/include ${DESTDIR}/${sitedir}/include
  for lib in ${DESTDIR}/usr/lib/lib*.so*; do
    ln -sf /${lib#${DESTDIR}/} ${DESTDIR}/${sitedir}/lib/
  done
}
