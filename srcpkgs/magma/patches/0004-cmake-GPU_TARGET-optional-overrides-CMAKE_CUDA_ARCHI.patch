From 896475b08f5fd0d32a2906588a296be0d9066e24 Mon Sep 17 00:00:00 2001
From: Mark Gates <mgates3@icl.utk.edu>
Date: Tue, 16 Jul 2024 21:25:50 -0400
Subject: [PATCH 04/10] cmake: GPU_TARGET optional, overrides
 CMAKE_CUDA_ARCHITECTURES. Add MAGMA_CUDA_ARCH.

---
 CMakeLists.txt               | 191 +++++++++++++++++------------------
 Makefile                     |  13 +--
 include/magma_config.h.in    |   1 +
 interface_cuda/interface.cpp |   2 +-
 4 files changed, 101 insertions(+), 106 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 39177e5a9..8b0c7eb3f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -112,122 +112,115 @@ if (OPENMP_FOUND)
     set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}" )
 endif()
 
+# ----------------------------------------
+# locate CUDA libraries
 if (MAGMA_ENABLE_CUDA)
-  enable_language(CUDA)
-
-  # ----------------------------------------
-  # locate CUDA libraries
-  set( GPU_TARGET "Kepler Maxwell Pascal" CACHE STRING "CUDA architectures to compile for; one or more of Fermi, Kepler, Maxwell, Pascal, Volta, Turing, Ampere, Hopper, or valid sm_[0-9][0-9]" )
-  find_package( CUDAToolkit )
-  if (CUDAToolkit_FOUND)
-    message( STATUS "Found CUDA ${CUDA_VERSION}" )
-    message( STATUS "    CUDA_CUDART_LIBRARY: CUDA::cudart" )
-    #message( STATUS "    CUDA_CUBLAS_LIBRARIES: CUDA::cublas" )
-
-    # NVCC options for the different cards
-    # sm_xx is binary, compute_xx is PTX for forward compatability
-    # MIN_ARCH is lowest requested version
-
-    set(__cuda_architectures)
-
-    include_directories( ${CUDAToolkit_INCLUDE_DIRS} )
-
-    if (DEFINED CMAKE_CUDA_ARCHITECTURES AND DEFINED MAGMA_CUDA_ARCH_MIN)
-        # Allow more control over targeted CUDA archs by skipping name to
-        # number arch conversion below
-        set(MIN_ARCH "${MAGMA_CUDA_ARCH_MIN}")
-        set(GPU_TARGET "")
-        message( STATUS "    compile for CUDA ${CMAKE_CUDA_ARCHITECTURES}" )
-    else()
-        # Both must be set manually to skip logic below
-        unset(CMAKE_CUDA_ARCHITECTURES)
-        unset(MAGMA_CUDA_ARCH_MIN)
-    endif()
+    enable_language( CUDA )
+
+    set( CUDA_NAMES
+         "one or more of "
+         "Fermi, Kepler, Maxwell, Pascal, Volta, Turing, Ampere, Hopper, "
+         "or valid sm_XY or sm_XYZ" )
+    set( GPU_TARGET "" CACHE STRING
+         "CUDA architectures to compile for, overrides CMAKE_CUDA_ARCHITECTURES; ${CUDA_NAMES}" )
+    find_package( CUDAToolkit )
+    if (CUDAToolkit_FOUND)
+        message( STATUS "Found CUDA ${CUDA_VERSION}" )
+        message( STATUS "    CUDA_CUDART_LIBRARY: CUDA::cudart" )
+        #message( STATUS "    CUDA_CUBLAS_LIBRARIES: CUDA::cublas" )
+
+        include_directories( ${CUDAToolkit_INCLUDE_DIRS} )
+
+        if (GPU_TARGET)
+            # Map names to architectures.
+            if (GPU_TARGET MATCHES Fermi)
+                set( GPU_TARGET "${GPU_TARGET} sm_20" )
+            endif()
 
-    if (GPU_TARGET MATCHES Fermi)
-        set( GPU_TARGET "${GPU_TARGET} sm_20" )
-    endif()
+            if (GPU_TARGET MATCHES Kepler)
+                set( GPU_TARGET "${GPU_TARGET} sm_30 sm_35 sm_37" )
+            endif()
 
-    if (GPU_TARGET MATCHES Kepler)
-        set( GPU_TARGET "${GPU_TARGET} sm_30 sm_35 sm_37" )
-    endif()
+            if (GPU_TARGET MATCHES Maxwell)
+                set( GPU_TARGET "${GPU_TARGET} sm_50" )
+            endif()
 
-    if (GPU_TARGET MATCHES Maxwell)
-        set( GPU_TARGET "${GPU_TARGET} sm_50" )
-    endif()
+            if (GPU_TARGET MATCHES Pascal)
+                set( GPU_TARGET "${GPU_TARGET} sm_60" )
+            endif()
 
-    if (GPU_TARGET MATCHES Pascal)
-        set( GPU_TARGET "${GPU_TARGET} sm_60" )
-    endif()
+            if (GPU_TARGET MATCHES Volta)
+                set( GPU_TARGET "${GPU_TARGET} sm_70" )
+            endif()
 
-    if (GPU_TARGET MATCHES Volta)
-        set( GPU_TARGET "${GPU_TARGET} sm_70" )
-    endif()
+            if (GPU_TARGET MATCHES Turing)
+                set( GPU_TARGET "${GPU_TARGET} sm_75" )
+            endif()
 
-    if (GPU_TARGET MATCHES Turing)
-        set( GPU_TARGET "${GPU_TARGET} sm_75" )
-    endif()
+            if (GPU_TARGET MATCHES Ampere)
+                set( GPU_TARGET "${GPU_TARGET} sm_80" )
+            endif()
 
-    if (GPU_TARGET MATCHES Ampere)
-        set( GPU_TARGET "${GPU_TARGET} sm_80" )
-    endif()
+            if (GPU_TARGET MATCHES Hopper)
+                set( GPU_TARGET "${GPU_TARGET} sm_90" )
+            endif()
 
-    if (GPU_TARGET MATCHES Hopper)
-        set( GPU_TARGET "${GPU_TARGET} sm_90" )
-    endif()
+            # Find all sm_XY and sm_XYZ, then strip off sm_.
+            string( REGEX MATCHALL "sm_[0-9][0-9]+" sms "${GPU_TARGET}" )
+            string( REPLACE "sm_" "" __cuda_architectures "${sms}" )
 
-    # MIN_SM is lowest requested version
-    set( MIN_SM 9999 )
+            if (NOT __cuda_architectures)
+                message( FATAL_ERROR
+                         "GPU_TARGET must contain ${CUDA_NAMES}. "
+                         "Was: ${GPU_TARGET}" )
+            endif()
 
-    string( REGEX MATCHALL "sm_[0-9]+[0-9]" sms "${GPU_TARGET}" )
-    foreach (sm IN LISTS sms)
-        string( REPLACE "sm_" "" sm "${sm}") # Remove sm_ prefix
-        if (sm LESS MIN_SM)
-            set( MIN_SM "${sm}" )
+            set( CMAKE_CUDA_ARCHITECTURES "${__cuda_architectures}" )
         endif()
-        list( APPEND __cuda_architectures "${sm}" )
-        string( REGEX REPLACE "([0-9]+)([0-9])" "\\1.\\2" cuda_arch "${sm}" )
-        message( STATUS "    compile for CUDA arch ${cuda_arch}" )
-    endforeach()
 
-    if (NOT __cuda_architectures)
-        message( FATAL_ERROR
-                 "GPU_TARGET must contain one or more of "
-                 "Fermi, Kepler, Maxwell, Pascal, Volta, Turing, Ampere, Hopper, or valid sm_[0-9][0-9]. "
-                 "Was: ${GPU_TARGET}" )
-    endif()
+        message( STATUS "    Compile for CMAKE_CUDA_ARCHITECTURES=${CMAKE_CUDA_ARCHITECTURES}" )
+        set( MAGMA_CUDA_ARCH "${CMAKE_CUDA_ARCHITECTURES}" )
+
+        # Find minimum arch in CMAKE_CUDA_ARCHITECTURES, if they're all numeric.
+        set( min_arch 9999 )
+        foreach( arch ${CMAKE_CUDA_ARCHITECTURES} )
+            if (arch MATCHES "^([0-9]+)")  # 80-real, 80-virtual, etc. okay
+                if (CMAKE_MATCH_1 LESS min_arch)
+                    set( min_arch "${CMAKE_MATCH_1}" )
+                endif()
+            else()
+                set( min_arch 0 )  # arch like "native", min unknown
+                break()
+            endif()
+        endforeach()
+        # Append zero, so it is comparable to '__CUDA_ARCH__'
+        set( MAGMA_CUDA_ARCH_MIN "${min_arch}0" )
+
+        add_library( magma_nvcc_flags INTERFACE )
+        if (COMPILER_SUPPORTS_FPIC)
+            target_compile_options(magma_nvcc_flags
+                INTERFACE
+                $<$<COMPILE_LANGUAGE:CUDA>:--compiler-options;-fPIC,${FORTRAN_CONVENTION}>
+            )
+        else()
+            # No Position Independent Code on Windows.
+            # Compiler will complain if you add that flag.
+            target_compile_options(magma_nvcc_flags
+                INTERFACE
+                $<$<COMPILE_LANGUAGE:CUDA>:--compiler-options;${FORTRAN_CONVENTION}>
+            )
+        endif()
 
-    message( STATUS "CUDA_ARCHITECTURES ${__cuda_architectures}" )
-    if (NOT DEFINED CMAKE_CUDA_ARCHITECTURES)
-        set(CMAKE_CUDA_ARCHITECTURES "${__cuda_architectures}")
-    endif()
-    set( MIN_ARCH ${MIN_SM}0 )
-
-    add_library(magma_nvcc_flags INTERFACE)
-    if (COMPILER_SUPPORTS_FPIC)
-        target_compile_options(magma_nvcc_flags
-            INTERFACE
-            $<$<COMPILE_LANGUAGE:CUDA>:--compiler-options;-fPIC,${FORTRAN_CONVENTION}>
-        )
-    else()
-        # No Position Independent Code on Windows. Compiler will complain if you add that flag.
-        target_compile_options(magma_nvcc_flags
-            INTERFACE
-            $<$<COMPILE_LANGUAGE:CUDA>:--compiler-options;${FORTRAN_CONVENTION}>
-        )
-    endif()
+        set( MAGMA_HAVE_CUDA "1" )
 
-    set(MAGMA_HAVE_CUDA "1")
-    if (NOT DEFINED MAGMA_CUDA_ARCH_MIN)
-        set(MAGMA_CUDA_ARCH_MIN "${MIN_ARCH}")
+        message( STATUS "Define -DMAGMA_HAVE_CUDA -DMAGMA_CUDA_ARCH_MIN=${MAGMA_CUDA_ARCH_MIN}" )
+    else()
+        message( STATUS "Could not find CUDA" )
     endif()
-    message( STATUS "Define -DMAGMA_HAVE_CUDA -DMAGMA_CUDA_ARCH_MIN=${MIN_ARCH}" )
-  else()
-    message( STATUS "Could not find CUDA" )
-  endif()
-
 endif()
 
+# ----------------------------------------
+# locate HIP/ROCm libraries
 if (MAGMA_ENABLE_HIP)
   set( GPU_TARGET "gfx900" CACHE STRING "HIP architectures to compile for" )
   list(APPEND CMAKE_PREFIX_PATH /opt/rocm /opt/rocm/lib/cmake/hip)
@@ -293,7 +286,7 @@ if (MAGMA_ENABLE_HIP)
     set(VALID_GFXS "700;701;702;703;704;705;801;802;803;805;810;900;902;904;906;908;909;90c;1010;1011;1012;1030;1031;1032;1033")
     foreach( GFX ${VALID_GFXS} )
       if ( GPU_TARGET MATCHES gfx${GFX} )
-	set( DEVCCFLAGS ${DEVCCFLAGS} --offload-arch=gfx${GFX} )
+        set( DEVCCFLAGS ${DEVCCFLAGS} --offload-arch=gfx${GFX} )
       endif()
     endforeach()
 
diff --git a/Makefile b/Makefile
index a6b69c419..d7273a5f0 100644
--- a/Makefile
+++ b/Makefile
@@ -174,11 +174,10 @@ ifeq ($(BACKEND),cuda)
         $(error ERROR: unknown `$(CUDA_ARCH_UNKNOWN_)` in GPU_TARGET)
     endif
 
-	# Now, sort sm's
+    # Now, sort sm's
     SMS      := $(patsubst sm_%,%,$(filter sm_%, $(CUDA_ARCH_)))
     SMS      := $(shell printf "%s\n" $(SMS) | sort -n)
 
-
     # code=sm_XX is binary, code=compute_XX is PTX
     GENCODE_SM      = -gencode arch=compute_$(sm),code=sm_$(sm)
     GENCODE_COMP    = -gencode arch=compute_$(sm),code=compute_$(sm)
@@ -187,7 +186,7 @@ ifeq ($(BACKEND),cuda)
     NV_SM    := $(foreach sm,$(SMS),$(GENCODE_SM))
     NV_COMP  := $(foreach sm,$(SMS),$(GENCODE_COMP))
 
-	# Check for empty
+    # Check for empty
     ifeq ($(NV_SM),)
         $(error ERROR: unknown `GPU_TARGET=$(GPU_TARGET)`. Set cuda_arch to one or more of Kepler, Maxwell, Pascal, Volta, Turing, Ampere, Hopper, or valid sm_XX from nvcc -h)
     else
@@ -202,7 +201,8 @@ ifeq ($(BACKEND),cuda)
     LIBS += -lcublas -lcudart
 
     # Get first (minimum) architecture
-	# (add zero, so its comparable to '__CUDA_ARCH__')
+    # Append zero, so it is comparable to '__CUDA_ARCH__'
+    CUDA_ARCH := $(SMS)
     CUDA_ARCH_MIN := $(word 1, $(SMS))0
     ifeq ($(CUDA_ARCH_MIN),)
         $(error GPU_TARGET, currently $(GPU_TARGET), must contain one or more of Fermi, Kepler, Maxwell, Pascal, Volta, Turing, Ampere, Hopper, or valid sm_[0-9][0-9]. Please edit your make.inc file)
@@ -485,6 +485,7 @@ ifneq (,$(HAVE_CUDA))
 
 $(CONFIG): $(CONFIGDEPS)
 	cp $< $@
+	sed -i -e 's/#cmakedefine MAGMA_CUDA_ARCH "@MAGMA_CUDA_ARCH@"/#define MAGMA_CUDA_ARCH "$(CUDA_ARCH)"/g' $@
 	sed -i -e 's/#cmakedefine MAGMA_CUDA_ARCH_MIN @MAGMA_CUDA_ARCH_MIN@/#define MAGMA_CUDA_ARCH_MIN $(CUDA_ARCH_MIN)/g' $@
 	sed -i -e 's/#cmakedefine MAGMA_HAVE_CUDA/#define MAGMA_HAVE_CUDA/g' $@
 	sed -i -e 's/#cmakedefine MAGMA_HAVE_HIP/#undef MAGMA_HAVE_HIP/g' $@
@@ -493,6 +494,7 @@ else
 
 $(CONFIG): $(CONFIGDEPS)
 	cp $< $@
+	sed -i -e 's/#cmakedefine MAGMA_CUDA_ARCH "@MAGMA_CUDA_ARCH@"/#define MAGMA_CUDA_ARCH "$(CUDA_ARCH)"/g' $@
 	sed -i -e 's/#cmakedefine MAGMA_CUDA_ARCH_MIN @MAGMA_CUDA_ARCH_MIN@/#define MAGMA_CUDA_ARCH_MIN $(CUDA_ARCH_MIN)/g' $@
 	sed -i -e 's/#cmakedefine MAGMA_HAVE_CUDA/#undef MAGMA_HAVE_CUDA/g' $@
 	sed -i -e 's/#cmakedefine MAGMA_HAVE_HIP/#define MAGMA_HAVE_HIP/g' $@
@@ -979,8 +981,7 @@ $(sparse_testers): %: %.$(o_ext)
 #TODO: add hip specific ones
 INSTALL_FLAGS := $(filter-out \
 	-DMAGMA_NOAFFINITY -DMAGMA_SETAFFINITY -DMAGMA_WITH_ACML -DMAGMA_WITH_MKL -DUSE_FLOCK \
-	-DMAGMA_CUDA_ARCH_MIN=100 -DMAGMA_CUDA_ARCH_MIN=200 -DMAGMA_CUDA_ARCH_MIN=300 \
-	-DMAGMA_CUDA_ARCH_MIN=350 -DMAGMA_CUDA_ARCH_MIN=500 -DMAGMA_CUDA_ARCH_MIN=600 -DMAGMA_CUDA_ARCH_MIN=610 \
+	-DMAGMA_CUDA_ARCH=% -DMAGMA_CUDA_ARCH_MIN=% \
 	-DMAGMA_HAVE_CUDA -DMAGMA_HAVE_HIP -DMAGMA_HAVE_clBLAS \
 	-fno-strict-aliasing -fPIC -O0 -O1 -O2 -O3 -pedantic -std=c99 -stdc++98 -stdc++11 \
 	-Wall -Wshadow -Wno-long-long, $(CFLAGS))
diff --git a/include/magma_config.h.in b/include/magma_config.h.in
index d551c42c6..1628f2bab 100644
--- a/include/magma_config.h.in
+++ b/include/magma_config.h.in
@@ -12,6 +12,7 @@
 
 // CUDA settings
 #cmakedefine MAGMA_HAVE_CUDA
+#cmakedefine MAGMA_CUDA_ARCH "@MAGMA_CUDA_ARCH@"
 #cmakedefine MAGMA_CUDA_ARCH_MIN @MAGMA_CUDA_ARCH_MIN@
 
 // HIP settings
diff --git a/interface_cuda/interface.cpp b/interface_cuda/interface.cpp
index 81b40a533..50b4fa3d3 100644
--- a/interface_cuda/interface.cpp
+++ b/interface_cuda/interface.cpp
@@ -374,7 +374,7 @@ magma_print_environment()
 
 #if defined(MAGMA_HAVE_CUDA)
 
-    printf("%% Compiled with CUDA support for %.1f\n", MAGMA_CUDA_ARCH_MIN/100.);
+    printf( "%% Compiled for CUDA architectures %s\n", MAGMA_CUDA_ARCH );
 
     // CUDA, OpenCL, OpenMP, MKL, ACML versions all printed on same line
     int cuda_runtime=0, cuda_driver=0;
-- 
2.47.1

