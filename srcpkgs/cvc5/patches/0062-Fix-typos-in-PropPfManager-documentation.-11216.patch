From ba5a3d7676ec38df55c67b0a39c61e74a527267f Mon Sep 17 00:00:00 2001
From: Aina Niemetz <aina.niemetz@gmail.com>
Date: Thu, 19 Sep 2024 08:07:18 -0700
Subject: [PATCH 062/312] Fix typos in PropPfManager documentation. (#11216)

---
 src/prop/prop_proof_manager.cpp | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/src/prop/prop_proof_manager.cpp b/src/prop/prop_proof_manager.cpp
index 0a9eb9801..d103b66f4 100644
--- a/src/prop/prop_proof_manager.cpp
+++ b/src/prop/prop_proof_manager.cpp
@@ -49,9 +49,9 @@ PropPfManager::PropPfManager(Env& env,
       // (= a b), whose proof depends on symmetry applied to (= b a). It does
       // not have a generator for (= b a). However if asked for a proof of the
       // fact (= b a) (after having expanded the proof of (= a b)), since it has
-      // no genarotor for (= b a), a proof (= b a) can be generated via symmetry
-      // on the proof of (= a b). As a result the assumption (= b a) would be
-      // assigned a proof with assumption (= b a). This breakes the invariant of
+      // no generator for (= b a), a proof (= b a) can be generated via symmetry
+      // on the proof of (= a b). As a result, the assumption (= b a) would be
+      // assigned a proof with assumption (= b a). This breaks the invariant of
       // the proof node manager of no cyclic proofs if the ASSUMPTION proof node
       // of both the assumption (= b a) we are asking the proof for and the
       // assumption (= b a) in the proof of (= a b) are the same.
@@ -71,10 +71,10 @@ PropPfManager::PropPfManager(Env& env,
       d_currLemmaId(theory::InferenceId::NONE),
       d_satPm(nullptr)
 {
-  // add trivial assumption. This is so that we can check the that the prop
-  // engine's proof is closed, as the SAT solver's refutation proof may use True
-  // as an assumption even when True is not given as an assumption. An example
-  // is when a propagated literal has an empty explanation (i.e., it is a valid
+  // Add trivial assumption. This is so that we can check that the prop engine's
+  // proof is closed, as the SAT solver's refutation proof may use True as an
+  // assumption even when True is not given as an assumption. An example is when
+  // a propagated literal has an empty explanation (i.e., it is a valid
   // literal), which leads to adding True as its explanation, since for creating
   // a learned clause we need at least two literals.
   d_assertions.push_back(nodeManager()->mkConst(true));
-- 
2.47.1

