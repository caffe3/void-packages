From b5aad212a0951019ab46fa60ac4fa2aeb3a40fcc Mon Sep 17 00:00:00 2001
From: mudathirmahgoub <mudathirmahgoub@gmail.com>
Date: Thu, 3 Oct 2024 09:50:40 -0500
Subject: [PATCH 098/312] Add regression filter_soundness_issue.smt2 (#11257)

This benchmark is answered incorrectly as unsat since cvc5 version
[cvc5-1.0.1](https://github.com/cvc5/cvc5/releases/tag/cvc5-1.0.1). It
was fixed by commit 2e6559891e2b8f0f4e529125de482c34ce003ae2.
---
 test/regress/cli/CMakeLists.txt                    |  1 +
 .../cli/regress1/sets/filter_soundness_issue.smt2  | 14 ++++++++++++++
 2 files changed, 15 insertions(+)
 create mode 100644 test/regress/cli/regress1/sets/filter_soundness_issue.smt2

diff --git a/test/regress/cli/CMakeLists.txt b/test/regress/cli/CMakeLists.txt
index c8b92079c..868aceb31 100644
--- a/test/regress/cli/CMakeLists.txt
+++ b/test/regress/cli/CMakeLists.txt
@@ -3028,6 +3028,7 @@ set(regress_1_tests
   regress1/sets/comp-pos-member.smt2
   regress1/sets/copy_check_heap_access_33_4.smt2
   regress1/sets/deepmeas0.hs.fqout.cvc4.41.smt2
+  regress1/sets/filter_soundness_issue.smt2
   regress1/sets/filter-no-lift-red_2.smt2
   regress1/sets/finite-type/bug3663.smt2
   regress1/sets/finite-type/sets-card-arrcolor.smt2
diff --git a/test/regress/cli/regress1/sets/filter_soundness_issue.smt2 b/test/regress/cli/regress1/sets/filter_soundness_issue.smt2
new file mode 100644
index 000000000..20080962f
--- /dev/null
+++ b/test/regress/cli/regress1/sets/filter_soundness_issue.smt2
@@ -0,0 +1,14 @@
+(set-logic HO_ALL)
+(set-info :status sat)
+(set-option :uf-lazy-ll true)
+(declare-const A (Set (Tuple Int)))
+(declare-const B (Set (Tuple Int)))
+(declare-const C (Set (Tuple Int)))
+(declare-const n (Set (Tuple Int Int)))
+(declare-const M (Set (Tuple Int Int)))
+(assert (distinct (rel.product A n) (as set.empty (Set (Tuple Int Int Int)))))
+(assert (= (as set.empty (Set (Tuple Int))) (set.filter (lambda ((tuple_2 (Tuple Int))) (= (as set.empty (Set (Tuple Int Int))) (set.filter (lambda ((tuple_3 (Tuple Int Int))) (distinct (as set.empty (Set (Tuple Int))) (set.filter (lambda ((tuple_4 (Tuple Int))) true) B))) n))) A)))
+(assert (= (as set.empty (Set (Tuple Int))) (set.filter (lambda ((tuple_12 (Tuple Int))) (= (as set.empty (Set (Tuple Int Int))) (set.filter (lambda ((tuple_13 (Tuple Int Int))) (and (= ((_ tuple.select 0) tuple_12) ((_ tuple.select 0) tuple_13)) (distinct (as set.empty (Set (Tuple Int))) (set.filter (lambda ((tuple_14 (Tuple Int))) (> ((_ tuple.select 0) tuple_14) ((_ tuple.select 0) tuple_12))) C)))) M))) B)))
+(assert (= (as set.empty (Set (Tuple Int))) (set.filter (lambda ((tuple_35 (Tuple Int))) (= (as set.empty (Set (Tuple Int Int))) (set.filter (lambda ((tuple_36 (Tuple Int Int))) (and (= ((_ tuple.select 0) tuple_35) ((_ tuple.select 0) tuple_36)) (distinct (as set.empty (Set (Tuple Int Int))) (set.filter (lambda ((tuple_38 (Tuple Int Int))) (= ((_ tuple.select 0) tuple_38) ((_ tuple.select 0) tuple_35))) n)))) M))) A)))
+(assert (= (as set.empty (Set (Tuple Int Int Int))) (set.filter (lambda ((tuple_62 (Tuple Int Int Int))) (< ((_ tuple.select 1) tuple_62) ((_ tuple.select 0) tuple_62))) (rel.product C n))))
+(check-sat)
-- 
2.47.1

