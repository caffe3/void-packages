From 3653506b2fe79386a7aa913ec0467759efa4aa0c Mon Sep 17 00:00:00 2001
From: Andrew Reynolds <andrew.j.reynolds@gmail.com>
Date: Fri, 22 Nov 2024 16:42:29 -0600
Subject: [PATCH 198/312] Do not use cegqi-bv for quantifiers from quantifier
 elimination (#11344)

Resolves the issue discussed on
https://github.com/cvc5/cvc5/discussions/11331.

In particular we forbid instantiations with witness terms for quantified
formulas marked as "quantifier elimination". Conversely, we allow model
values as a last resort for such formulas always.
---
 .../quantifiers/cegqi/ceg_instantiator.cpp      | 17 ++++++++++++++---
 .../quantifiers/quantifiers_attributes.cpp      | 17 +++++++++++++----
 src/theory/quantifiers/quantifiers_attributes.h |  7 ++++++-
 test/regress/cli/CMakeLists.txt                 |  3 ++-
 .../cli/regress1/quantifiers/qe-no-skolem.smt2  |  7 +++++++
 5 files changed, 42 insertions(+), 9 deletions(-)
 create mode 100644 test/regress/cli/regress1/quantifiers/qe-no-skolem.smt2

diff --git a/src/theory/quantifiers/cegqi/ceg_instantiator.cpp b/src/theory/quantifiers/cegqi/ceg_instantiator.cpp
index e5deb6a5e..bc768b378 100644
--- a/src/theory/quantifiers/cegqi/ceg_instantiator.cpp
+++ b/src/theory/quantifiers/cegqi/ceg_instantiator.cpp
@@ -505,6 +505,8 @@ bool CegInstantiator::constructInstantiation(SolvedForm& sf, unsigned i)
       }
     }
     // If the above call fails, resort to using value in model. We do so if:
+    // (A) we are doing quantifier elimination for this quantified formula, or
+    // (B) all of the following hold:
     // - we have yet to try an instantiation this round (or we are trying
     //   multiple instantiations, indicated by options::cegqiMultiInst),
     // - the instantiator uses model values at this effort or
@@ -512,9 +514,11 @@ bool CegInstantiator::constructInstantiation(SolvedForm& sf, unsigned i)
     // - the instantiator allows model values.
     // Furthermore, we only permit the value if it is constant, since the model
     // may contain internal-only expressions, e.g. RANs.
-    if ((options().quantifiers.cegqiMultiInst || !hasTriedInstantiation(pv))
-        && (vinst->useModelValue(this, sf, pv, d_effort) || is_sv)
-        && vinst->allowModelValue(this, sf, pv, d_effort))
+    bool isQElim = d_qreg.getQuantAttributes().isQuantElim(d_quant);
+    if (isQElim
+        || ((options().quantifiers.cegqiMultiInst || !hasTriedInstantiation(pv))
+            && (vinst->useModelValue(this, sf, pv, d_effort) || is_sv)
+            && vinst->allowModelValue(this, sf, pv, d_effort)))
     {
       Node mv = getModelValue( pv );
       if (mv.isConst())
@@ -1005,12 +1009,19 @@ bool CegInstantiator::doAddInstantiation(std::vector<Node>& vars,
   Trace("cegqi-inst-debug") << "Do the instantiation...." << std::endl;
 
   // construct the final instantiation by eliminating witness terms
+  bool isQElim = d_qreg.getQuantAttributes().isQuantElim(d_quant);
   std::vector<Node> svec;
   std::vector<Node> exists;
   for (const Node& s : subs)
   {
     if (expr::hasSubtermKind(Kind::WITNESS, s))
     {
+      if (isQElim)
+      {
+        Trace("cegqi-inst-debug") << "...no witness if QE" << std::endl;
+        // not allowed to use witness if doing quantifier elimination
+        return false;
+      }
       PreprocessElimWitnessNodeConverter ewc(d_env, d_qstate.getValuation());
       Node sc = ewc.convert(s);
       const std::vector<Node>& wexists = ewc.getExistentials();
diff --git a/src/theory/quantifiers/quantifiers_attributes.cpp b/src/theory/quantifiers/quantifiers_attributes.cpp
index dc78485d8..4bc984d96 100644
--- a/src/theory/quantifiers/quantifiers_attributes.cpp
+++ b/src/theory/quantifiers/quantifiers_attributes.cpp
@@ -369,13 +369,22 @@ int64_t QuantAttributes::getQuantInstLevel(Node q)
   }
 }
 
-bool QuantAttributes::isQuantElimPartial( Node q ) {
-  std::map< Node, QAttributes >::iterator it = d_qattr.find( q );
+bool QuantAttributes::isQuantElim(Node q) const
+{
+  std::map<Node, QAttributes>::const_iterator it = d_qattr.find(q);
+  if (it == d_qattr.end())
+  {
+    return false;
+  }
+  return it->second.d_quant_elim;
+}
+bool QuantAttributes::isQuantElimPartial(Node q) const
+{
+  std::map<Node, QAttributes>::const_iterator it = d_qattr.find(q);
   if( it==d_qattr.end() ){
     return false;
-  }else{
-    return it->second.d_quant_elim_partial;
   }
+  return it->second.d_quant_elim_partial;
 }
 
 bool QuantAttributes::isQuantBounded(Node q) const
diff --git a/src/theory/quantifiers/quantifiers_attributes.h b/src/theory/quantifiers/quantifiers_attributes.h
index 65f629e38..5bb8e7f33 100644
--- a/src/theory/quantifiers/quantifiers_attributes.h
+++ b/src/theory/quantifiers/quantifiers_attributes.h
@@ -227,8 +227,13 @@ class QuantAttributes
   bool isOracleInterface(Node q);
   /** get instantiation level */
   int64_t getQuantInstLevel(Node q);
+  /**
+   * Is q a quantified formula we are performing quantifier elimination for?
+   * This also true if we are performing partial quantifier elimination on q.
+   */
+  bool isQuantElim(Node q) const;
   /** is quant elim partial */
-  bool isQuantElimPartial( Node q );
+  bool isQuantElimPartial(Node q) const;
   /** is internal quantifier */
   bool isQuantBounded(Node q) const;
   /** get quant name, which is used for :qid */
diff --git a/test/regress/cli/CMakeLists.txt b/test/regress/cli/CMakeLists.txt
index a15e2d84c..138fe26b3 100644
--- a/test/regress/cli/CMakeLists.txt
+++ b/test/regress/cli/CMakeLists.txt
@@ -2462,7 +2462,6 @@ set(regress_1_tests
   regress1/gensys_brn001.smt2
   regress1/get-learned-literals.smt2
   regress1/get-learned-literals-types.smt2
-  regress1/quantifiers/ho-grammar.smt2
   regress1/ho/bug_freeVar_BDD_General_data_270.smt2
   regress1/ho/bound_var_bug.smt2
   regress1/ho/dd.seu-mbqi.smt2
@@ -2768,6 +2767,7 @@ set(regress_1_tests
   regress1/quantifiers/florian-case-ax.smt2
   regress1/quantifiers/fp-cegqi-unsat.smt2
   regress1/quantifiers/gauss_init_0030.fof.smt2
+  regress1/quantifiers/ho-grammar.smt2
   regress1/quantifiers/ho-seu-sygus-inst.smt2
   regress1/quantifiers/horn-simple.smt2
   regress1/quantifiers/inst-max-level-segf.smt2
@@ -2894,6 +2894,7 @@ set(regress_1_tests
   regress1/quantifiers/qcft-javafe.filespace.TreeWalker.006.smt2
   regress1/quantifiers/qcft-smtlib3dbc51.smt2
   regress1/quantifiers/qe.smt2
+  regress1/quantifiers/qe-no-skolem.smt2
   regress1/quantifiers/qe-partial.smt2
   regress1/quantifiers/qe-subtypes.smt2
   regress1/quantifiers/qid.smt2
diff --git a/test/regress/cli/regress1/quantifiers/qe-no-skolem.smt2 b/test/regress/cli/regress1/quantifiers/qe-no-skolem.smt2
new file mode 100644
index 000000000..0a04b4afd
--- /dev/null
+++ b/test/regress/cli/regress1/quantifiers/qe-no-skolem.smt2
@@ -0,0 +1,7 @@
+; SCRUBBER: sed 's/(.*)/()/g'
+; EXPECT: ()
+; EXIT: 0
+(set-logic ALL)
+(declare-const x (_ BitVec 2))
+(declare-const y (_ BitVec 2))
+(get-qe (exists ((z (_ BitVec 2))) (= (bvmul x z) #b01)))
-- 
2.47.1

