From 5716e0cd951146a47a76a21284a7cff232df8b02 Mon Sep 17 00:00:00 2001
From: Andrew Reynolds <andrew.j.reynolds@gmail.com>
Date: Thu, 12 Dec 2024 16:02:05 -0600
Subject: [PATCH 240/312] Add two macro rewrites for arrays (#11440)

These will be elaborated to simpler steps in future PRs.

---------

Co-authored-by: Abdalrhman Mohamed <abdoo8080@outlook.com>
---
 include/cvc5/cvc5_proof_rule.h               | 27 ++++++++++++++++++++
 src/api/cpp/cvc5_proof_rule_template.cpp     |  4 +++
 src/theory/arrays/theory_arrays_rewriter.cpp | 27 ++++++++++++++++++++
 3 files changed, 58 insertions(+)

diff --git a/include/cvc5/cvc5_proof_rule.h b/include/cvc5/cvc5_proof_rule.h
index 88ed9b86a..451c9ba49 100644
--- a/include/cvc5/cvc5_proof_rule.h
+++ b/include/cvc5/cvc5_proof_rule.h
@@ -2498,6 +2498,33 @@ enum ENUM(ProofRewriteRule)
    * \endverbatim
    */
   EVALUE(ARRAYS_SELECT_CONST),
+  /**
+   * \verbatim embed:rst:leading-asterisk
+   * **Arrays -- Macro distinct arrays**
+   *
+   * .. math::
+   *   (A = B) = \bot
+   *
+   * where :math:`A` and :math:`B` are distinct array values, that is,
+   * the Node::isConst method returns true for both.
+   *
+   * \endverbatim
+   */
+  EVALUE(MACRO_ARRAYS_DISTINCT_ARRAYS),
+  /**
+   * \verbatim embed:rst:leading-asterisk
+   * **Arrays -- Macro normalize constant**
+   *
+   * .. math::
+   *   A = B
+   *
+   * where :math:`B` is the result of normalizing the array value :math:`A`
+   * into a canonical form, using the internal method
+   * TheoryArraysRewriter::normalizeConstant.
+   *
+   * \endverbatim
+   */
+  EVALUE(MACRO_ARRAYS_NORMALIZE_CONSTANT),
   /**
    * \verbatim embed:rst:leading-asterisk
    * **Arrays -- Expansion of array range equality**
diff --git a/src/api/cpp/cvc5_proof_rule_template.cpp b/src/api/cpp/cvc5_proof_rule_template.cpp
index 405f62ef3..b2e1f87ca 100644
--- a/src/api/cpp/cvc5_proof_rule_template.cpp
+++ b/src/api/cpp/cvc5_proof_rule_template.cpp
@@ -237,6 +237,10 @@ const char* toString(cvc5::ProofRewriteRule rule)
     case ProofRewriteRule::BETA_REDUCE: return "beta-reduce";
     case ProofRewriteRule::LAMBDA_ELIM: return "lambda-elim";
     case ProofRewriteRule::ARRAYS_SELECT_CONST: return "arrays-select-const";
+    case ProofRewriteRule::MACRO_ARRAYS_DISTINCT_ARRAYS:
+      return "macro-arrays-distinct-arrays";
+    case ProofRewriteRule::MACRO_ARRAYS_NORMALIZE_CONSTANT:
+      return "macro-arrays-normalize-constant";
     case ProofRewriteRule::ARRAYS_EQ_RANGE_EXPAND:
       return "arrays-eq-range-expand";
     case ProofRewriteRule::EXISTS_ELIM: return "exists-elim";
diff --git a/src/theory/arrays/theory_arrays_rewriter.cpp b/src/theory/arrays/theory_arrays_rewriter.cpp
index 19256df3c..8aaa6c58f 100644
--- a/src/theory/arrays/theory_arrays_rewriter.cpp
+++ b/src/theory/arrays/theory_arrays_rewriter.cpp
@@ -66,6 +66,10 @@ void setMostFrequentValueCount(TNode store, uint64_t count)
 TheoryArraysRewriter::TheoryArraysRewriter(NodeManager* nm, Rewriter* r)
     : TheoryRewriter(nm), d_rewriter(r)
 {
+  registerProofRewriteRule(ProofRewriteRule::MACRO_ARRAYS_DISTINCT_ARRAYS,
+                           TheoryRewriteCtx::PRE_DSL);
+  registerProofRewriteRule(ProofRewriteRule::MACRO_ARRAYS_NORMALIZE_CONSTANT,
+                           TheoryRewriteCtx::PRE_DSL);
   registerProofRewriteRule(ProofRewriteRule::ARRAYS_SELECT_CONST,
                            TheoryRewriteCtx::PRE_DSL);
   registerProofRewriteRule(ProofRewriteRule::ARRAYS_EQ_RANGE_EXPAND,
@@ -76,6 +80,29 @@ Node TheoryArraysRewriter::rewriteViaRule(ProofRewriteRule id, const Node& n)
 {
   switch (id)
   {
+    case ProofRewriteRule::MACRO_ARRAYS_DISTINCT_ARRAYS:
+    {
+      if (n.getKind() == Kind::EQUAL && n[0].isConst() && n[1].isConst()
+          && n[0] != n[1])
+      {
+        Assert(n[0].getType().isArray());
+        return d_nm->mkConst(false);
+      }
+    }
+    break;
+    case ProofRewriteRule::MACRO_ARRAYS_NORMALIZE_CONSTANT:
+    {
+      if (n.getKind() == Kind::STORE && n[0].isConst() && n[1].isConst()
+          && n[2].isConst())
+      {
+        Node nn = normalizeConstant(nodeManager(), n);
+        if (nn != n)
+        {
+          return nn;
+        }
+      }
+    }
+    break;
     case ProofRewriteRule::ARRAYS_SELECT_CONST:
     {
       if (n.getKind() == Kind::SELECT && n[0].getKind() == Kind::STORE_ALL)
-- 
2.47.1

