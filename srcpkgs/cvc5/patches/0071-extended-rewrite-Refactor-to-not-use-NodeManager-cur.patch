From 0bfb8c85b9fa26ce217c6d8427e920c0facb05ec Mon Sep 17 00:00:00 2001
From: Daniel Larraz <daniel-larraz@users.noreply.github.com>
Date: Tue, 24 Sep 2024 17:21:10 -0500
Subject: [PATCH 071/312] extended rewrite: Refactor to not use
 NodeManager::currentNM() (#11224)

---
 src/theory/quantifiers/extended_rewrite.cpp | 30 ++++++++++-----------
 1 file changed, 15 insertions(+), 15 deletions(-)

diff --git a/src/theory/quantifiers/extended_rewrite.cpp b/src/theory/quantifiers/extended_rewrite.cpp
index 1ec5e21ea..76c752a7c 100644
--- a/src/theory/quantifiers/extended_rewrite.cpp
+++ b/src/theory/quantifiers/extended_rewrite.cpp
@@ -47,9 +47,9 @@ typedef expr::Attribute<ExtRewriteAggAttributeId, Node> ExtRewriteAggAttribute;
 ExtendedRewriter::ExtendedRewriter(NodeManager* nm, Rewriter& rew, bool aggr)
     : d_nm(nm), d_rew(rew), d_aggr(aggr)
 {
-  d_true = NodeManager::currentNM()->mkConst(true);
-  d_false = NodeManager::currentNM()->mkConst(false);
-  d_intZero = NodeManager::currentNM()->mkConstInt(Rational(0));
+  d_true = d_nm->mkConst(true);
+  d_false = d_nm->mkConst(false);
+  d_intZero = d_nm->mkConstInt(Rational(0));
 }
 
 void ExtendedRewriter::setCache(Node n, Node ret) const
@@ -111,7 +111,7 @@ Node ExtendedRewriter::extendedRewrite(Node n) const
   }
 
   Node ret = n;
-  NodeManager* nm = NodeManager::currentNM();
+  NodeManager* nm = d_nm;
 
   //--------------------pre-rewrite
   if (d_aggr)
@@ -377,7 +377,7 @@ Node ExtendedRewriter::extendedRewriteIte(Kind itek, Node n, bool full) const
   Assert(n.getKind() == itek);
   Assert(n[1] != n[2]);
 
-  NodeManager* nm = NodeManager::currentNM();
+  NodeManager* nm = d_nm;
 
   Trace("ext-rew-ite") << "Rewrite ITE : " << n << std::endl;
 
@@ -630,7 +630,7 @@ Node ExtendedRewriter::extendedRewritePullIte(Kind itek, Node n) const
     // don't pull ITE out of quantifiers
     return n;
   }
-  NodeManager* nm = NodeManager::currentNM();
+  NodeManager* nm = d_nm;
   TypeNode tn = n.getType();
   std::vector<Node> children;
   bool hasOp = (n.getMetaKind() == metakind::PARAMETERIZED);
@@ -786,7 +786,7 @@ Node ExtendedRewriter::extendedRewriteNnf(Node ret) const
     c = (i == 0 ? neg_ch_1 : false) != neg_ch ? c.negate() : c;
     new_children.push_back(c);
   }
-  return NodeManager::currentNM()->mkNode(nk, new_children);
+  return d_nm->mkNode(nk, new_children);
 }
 
 Node ExtendedRewriter::extendedRewriteBcp(Kind andk,
@@ -799,7 +799,7 @@ Node ExtendedRewriter::extendedRewriteBcp(Kind andk,
   Assert(k == andk || k == ork);
   Trace("ext-rew-bcp") << "BCP: **** INPUT: " << ret << std::endl;
 
-  NodeManager* nm = NodeManager::currentNM();
+  NodeManager* nm = d_nm;
 
   TypeNode tn = ret.getType();
   Node truen = TermUtil::mkTypeMaxValue(tn);
@@ -960,7 +960,7 @@ Node ExtendedRewriter::extendedRewriteFactoring(Kind andk,
                                                 Node n) const
 {
   Trace("ext-rew-factoring") << "Factoring: *** INPUT: " << n << std::endl;
-  NodeManager* nm = NodeManager::currentNM();
+  NodeManager* nm = d_nm;
 
   Kind nk = n.getKind();
   Assert(nk == andk || nk == ork);
@@ -1055,7 +1055,7 @@ Node ExtendedRewriter::extendedRewriteEqRes(Kind andk,
   Assert(n.getKind() == andk || n.getKind() == ork);
   Trace("ext-rew-eqres") << "Eq res: **** INPUT: " << n << std::endl;
 
-  NodeManager* nm = NodeManager::currentNM();
+  NodeManager* nm = d_nm;
   Kind nk = n.getKind();
   bool gpol = (nk == andk);
   for (unsigned i = 0, nchild = n.getNumChildren(); i < nchild; i++)
@@ -1209,7 +1209,7 @@ Node ExtendedRewriter::extendedRewriteEqChain(
     return Node::null();
   }
 
-  NodeManager* nm = NodeManager::currentNM();
+  NodeManager* nm = d_nm;
 
   TypeNode tn = ret[0].getType();
 
@@ -1625,7 +1625,7 @@ Node ExtendedRewriter::partialSubstitute(
       }
       if (childChanged)
       {
-        ret = NodeManager::currentNM()->mkNode(cur.getKind(), children);
+        ret = d_nm->mkNode(cur.getKind(), children);
       }
       visited[cur] = ret;
     }
@@ -1715,7 +1715,7 @@ bool ExtendedRewriter::inferSubstitution(Node n, Subs& subs, bool usePred) const
   {
     bool negated = n.getKind() == Kind::NOT;
     Node var = negated ? n[0] : n;
-    Node s = NodeManager::currentNM()->mkConst(!negated);
+    Node s = d_nm->mkConst(!negated);
     subs.add(var, s);
     return true;
   }
@@ -1735,7 +1735,7 @@ Node ExtendedRewriter::extendedRewriteStrings(const Node& node) const
   }
   else if (k == Kind::STRING_SUBSTR)
   {
-    NodeManager* nm = NodeManager::currentNM();
+    NodeManager* nm = d_nm;
     Node tot_len = d_rew.rewrite(nm->mkNode(Kind::STRING_LENGTH, node[0]));
     strings::ArithEntail aent(&d_rew);
     // (str.substr s x y) --> "" if x < len(s) |= 0 >= y
@@ -1779,7 +1779,7 @@ Node ExtendedRewriter::extendedRewriteSets(const Node& node) const
     // (setminus A B)), for instance if we are splitting the Venn regions of A
     // and (set.minus A B), then we should not transform this to an intersection
     // term. (set.minus A (set.minus A B)) = (set.inter A B)
-    NodeManager* nm = NodeManager::currentNM();
+    NodeManager* nm = d_nm;
     Node ret = nm->mkNode(Kind::SET_INTER, node[0], node[1][1]);
     debugExtendedRewrite(node, ret, "SET_MINUS_MINUS");
     return ret;
-- 
2.47.1

