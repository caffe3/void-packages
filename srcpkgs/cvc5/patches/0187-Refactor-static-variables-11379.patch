From c1c590d35b094228f7e18797cfa1dcc3934e1e8a Mon Sep 17 00:00:00 2001
From: Amalee Wilson <amalee@cs.stanford.edu>
Date: Wed, 20 Nov 2024 13:03:51 -0800
Subject: [PATCH 187/312] Refactor static variables (#11379)

Moved static variables into the statistic class instead of having them
be static.
---
 src/preprocessing/util/ite_utilities.cpp | 44 +++++++++++++-----------
 src/preprocessing/util/ite_utilities.h   |  4 +++
 2 files changed, 27 insertions(+), 21 deletions(-)

diff --git a/src/preprocessing/util/ite_utilities.cpp b/src/preprocessing/util/ite_utilities.cpp
index 5992d5ce0..0c66dc835 100644
--- a/src/preprocessing/util/ite_utilities.cpp
+++ b/src/preprocessing/util/ite_utilities.cpp
@@ -709,6 +709,10 @@ ITESimplifier::Statistics::Statistics(StatisticsRegistry& reg)
       d_binaryPredFold(reg.registerInt("ite-simp::binaryPredFold")),
       d_specialEqualityFolds(reg.registerInt("ite-simp::specialEqualityFolds")),
       d_simpITEVisits(reg.registerInt("ite-simp::simpITE.visits")),
+      d_numBranches(0),
+      d_numFalseBranches(0),
+      d_itesMade(0),
+      d_instance(0),
       d_inSmaller(reg.registerHistogram<uint32_t>("ite-simp::inSmaller"))
 {
 }
@@ -1064,21 +1068,18 @@ Node ITESimplifier::transformAtom(TNode atom)
   }
 }
 
-static thread_local unsigned numBranches = 0;
-static thread_local unsigned numFalseBranches = 0;
-static thread_local unsigned itesMade = 0;
-
 Node ITESimplifier::constantIteEqualsConstant(TNode cite, TNode constant)
 {
-  static thread_local int instance = 0;
-  ++instance;
+  d_statistics.d_instance = 0;
+  ++(d_statistics.d_instance);
   Trace("ite::constantIteEqualsConstant")
-      << instance << "constantIteEqualsConstant(" << cite << ", " << constant
-      << ")" << endl;
+      << (d_statistics.d_instance) << "constantIteEqualsConstant(" << cite
+      << ", " << constant << ")" << endl;
   if (cite.isConst())
   {
     Node res = (cite == constant) ? d_true : d_false;
-    Trace("ite::constantIteEqualsConstant") << instance << "->" << res << endl;
+    Trace("ite::constantIteEqualsConstant")
+        << (d_statistics.d_instance) << "->" << res << endl;
     return res;
   }
   std::pair<Node, Node> pair = make_pair(cite, constant);
@@ -1088,7 +1089,7 @@ Node ITESimplifier::constantIteEqualsConstant(TNode cite, TNode constant)
   if (eq_pos != d_constantIteEqualsConstantCache.end())
   {
     Trace("ite::constantIteEqualsConstant")
-        << instance << "->" << (*eq_pos).second << endl;
+        << (d_statistics.d_instance) << "->" << (*eq_pos).second << endl;
     return (*eq_pos).second;
   }
 
@@ -1103,7 +1104,7 @@ Node ITESimplifier::constantIteEqualsConstant(TNode cite, TNode constant)
       // probably unreachable
       d_constantIteEqualsConstantCache[pair] = d_true;
       Trace("ite::constantIteEqualsConstant")
-          << instance << "->" << d_true << endl;
+          << (d_statistics.d_instance) << "->" << d_true << endl;
       return d_true;
     }
     else
@@ -1117,13 +1118,13 @@ Node ITESimplifier::constantIteEqualsConstant(TNode cite, TNode constant)
       Node boolIte = cnd.iteNode(tEqs, fEqs);
       if (!(tEqs.isConst() || fEqs.isConst()))
       {
-        ++numBranches;
+        ++(d_statistics.d_numBranches);
       }
       if (!(tEqs == d_false || fEqs == d_false))
       {
-        ++numFalseBranches;
+        ++(d_statistics.d_numFalseBranches);
       }
-      ++itesMade;
+      ++(d_statistics.d_itesMade);
       d_constantIteEqualsConstantCache[pair] = boolIte;
       // Trace("ite::constantIteEqualsConstant") << instance << "->" << boolIte
       // << endl;
@@ -1134,7 +1135,7 @@ Node ITESimplifier::constantIteEqualsConstant(TNode cite, TNode constant)
   {
     d_constantIteEqualsConstantCache[pair] = d_false;
     Trace("ite::constantIteEqualsConstant")
-        << instance << "->" << d_false << endl;
+        << (d_statistics.d_instance) << "->" << d_false << endl;
     return d_false;
   }
 }
@@ -1150,13 +1151,14 @@ Node ITESimplifier::intersectConstantIte(TNode lcite, TNode rcite)
     TNode cite = lIsConst ? rcite : lcite;
 
     (d_statistics.d_inSmaller) << 1;
-    unsigned preItesMade = itesMade;
-    unsigned preNumBranches = numBranches;
-    unsigned preNumFalseBranches = numFalseBranches;
+    unsigned preItesMade = d_statistics.d_itesMade;
+    unsigned preNumBranches = d_statistics.d_numBranches;
+    unsigned preNumFalseBranches = d_statistics.d_numFalseBranches;
     Node bterm = constantIteEqualsConstant(cite, constant);
-    Trace("intersectConstantIte") << (numBranches - preNumBranches) << " "
-                                  << (numFalseBranches - preNumFalseBranches)
-                                  << " " << (itesMade - preItesMade) << endl;
+    Trace("intersectConstantIte")
+        << ((d_statistics.d_numBranches) - preNumBranches) << " "
+        << ((d_statistics.d_numFalseBranches) - preNumFalseBranches) << " "
+        << ((d_statistics.d_itesMade) - preItesMade) << endl;
     return bterm;
   }
   Assert(lcite.getKind() == Kind::ITE);
diff --git a/src/preprocessing/util/ite_utilities.h b/src/preprocessing/util/ite_utilities.h
index 317c5366b..b1d42fab8 100644
--- a/src/preprocessing/util/ite_utilities.h
+++ b/src/preprocessing/util/ite_utilities.h
@@ -235,6 +235,10 @@ class ITESimplifier : protected EnvObj
     IntStat d_binaryPredFold;
     IntStat d_specialEqualityFolds;
     IntStat d_simpITEVisits;
+    unsigned d_numBranches;
+    unsigned d_numFalseBranches;
+    unsigned d_itesMade;
+    unsigned d_instance;
 
     HistogramStat<uint32_t> d_inSmaller;
 
-- 
2.47.1

