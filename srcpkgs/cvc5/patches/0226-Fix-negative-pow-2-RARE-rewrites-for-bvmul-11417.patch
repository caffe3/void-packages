From 9c1ecb0bced426971eb647773a17d378caf1894e Mon Sep 17 00:00:00 2001
From: Andrew Reynolds <andrew.j.reynolds@gmail.com>
Date: Mon, 9 Dec 2024 13:36:03 -0600
Subject: [PATCH 226/312] Fix negative pow 2 RARE rewrites for bvmul (#11417)

This was mistakenly negating the integer value of the bitvector instead
of taking twos compliement.

Adds a regression to excersize the 2nd variant of the rule.
---
 proofs/eo/cpc/rules/Rewrites.eo                           | 4 ++--
 src/theory/bv/rewrites-simplification                     | 8 ++++----
 test/regress/cli/CMakeLists.txt                           | 1 +
 .../cli/regress0/proofs/bv-mul-pow2-neg-middle.smt2       | 7 +++++++
 4 files changed, 14 insertions(+), 6 deletions(-)
 create mode 100644 test/regress/cli/regress0/proofs/bv-mul-pow2-neg-middle.smt2

diff --git a/proofs/eo/cpc/rules/Rewrites.eo b/proofs/eo/cpc/rules/Rewrites.eo
index 5472cc688..ecc4bfd0b 100644
--- a/proofs/eo/cpc/rules/Rewrites.eo
+++ b/proofs/eo/cpc/rules/Rewrites.eo
@@ -1026,12 +1026,12 @@
   :conclusion (= (bvmul xs1 z1 (@bv n1 size1) ys1) (concat (extract u1 0 ($singleton_elim (bvmul xs1 z1 ys1))) (@bv 0 exponent1)))
 )
 (declare-rule bv-mult-pow2-2 ((@n0 Int) (@n1 Int) (@n2 Int) (xs1 (BitVec @n0) :list) (ys1 (BitVec @n1) :list) (z1 (BitVec @n2)) (size1 Int) (n1 Int) (exponent1 Int) (u1 Int))
-  :premises ((= (int.ispow2 (- n1)) true) (= exponent1 (int.log2 n1)) (= u1 (- (- size1 (int.log2 n1)) 1)))
+  :premises ((= (int.ispow2 (- (int.pow2 size1) n1)) true) (= exponent1 (int.log2 (- (int.pow2 size1) n1))) (= u1 (- (- size1 (int.log2 (- (int.pow2 size1) n1))) 1)))
   :args (xs1 ys1 z1 size1 n1 exponent1 u1)
   :conclusion (= (bvmul xs1 z1 (@bv n1 size1) ys1) (concat (extract u1 0 (bvneg ($singleton_elim (bvmul xs1 z1 ys1)))) (@bv 0 exponent1)))
 )
 (declare-rule bv-mult-pow2-2b ((@n0 Int) (z1 (BitVec @n0)) (size1 Int) (n1 Int) (exponent1 Int) (u1 Int))
-  :premises ((= (int.ispow2 (- n1)) true) (= exponent1 (int.log2 n1)) (= u1 (- (- size1 (int.log2 n1)) 1)))
+  :premises ((= (int.ispow2 (- (int.pow2 size1) n1)) true) (= exponent1 (int.log2 (- (int.pow2 size1) n1))) (= u1 (- (- size1 (int.log2 (- (int.pow2 size1) n1))) 1)))
   :args (z1 size1 n1 exponent1 u1)
   :conclusion (= (bvmul z1 (@bv n1 size1)) (concat (extract u1 0 (bvneg z1)) (@bv 0 exponent1)))
 )
diff --git a/src/theory/bv/rewrites-simplification b/src/theory/bv/rewrites-simplification
index 6ffa7a057..73246369c 100644
--- a/src/theory/bv/rewrites-simplification
+++ b/src/theory/bv/rewrites-simplification
@@ -245,16 +245,16 @@
     (@bv 0 exponent)))
 (define-cond-rule bv-mult-pow2-2
   ((xs ?BitVec :list) (ys ?BitVec :list) (z ?BitVec) (size Int) (n Int) (exponent Int) (u Int))
-  (def (e (int.log2 n)))
-  (and (int.ispow2 (- n)) (= exponent e) (= u (- (- size e) 1)))
+  (def (ns (- (int.pow2 size) n)) (e (int.log2 ns)))
+  (and (int.ispow2 ns) (= exponent e) (= u (- (- size e) 1)))
   (bvmul xs z (@bv n size) ys)
   (concat
     (extract u 0 (bvneg (bvmul xs z ys)))
     (@bv 0 exponent)))
 (define-cond-rule bv-mult-pow2-2b
   ((z ?BitVec) (size Int) (n Int) (exponent Int) (u Int))
-  (def (e (int.log2 n)))
-  (and (int.ispow2 (- n)) (= exponent e) (= u (- (- size e) 1)))
+  (def (ns (- (int.pow2 size) n)) (e (int.log2 ns)))
+  (and (int.ispow2 ns) (= exponent e) (= u (- (- size e) 1)))
   (bvmul z (@bv n size))
   (concat
     (extract u 0 (bvneg z))
diff --git a/test/regress/cli/CMakeLists.txt b/test/regress/cli/CMakeLists.txt
index e8dbaaa5f..a06d3ab45 100644
--- a/test/regress/cli/CMakeLists.txt
+++ b/test/regress/cli/CMakeLists.txt
@@ -1312,6 +1312,7 @@ set(regress_0_tests
   regress0/proofs/alethe-res-need-or-step.smt2
   regress0/proofs/arith-poly-norm-rel-mixed.smt2
   regress0/proofs/cyclic-ucp.smt2
+  regress0/proofs/bv-mul-pow2-neg-middle.smt2
   regress0/proofs/bvrewrite-concat-merge.smt2
   regress0/proofs/bvrewrite-extract.smt2
   regress0/proofs/bvrewrite-ite.smt2
diff --git a/test/regress/cli/regress0/proofs/bv-mul-pow2-neg-middle.smt2 b/test/regress/cli/regress0/proofs/bv-mul-pow2-neg-middle.smt2
new file mode 100644
index 000000000..0c47f50c8
--- /dev/null
+++ b/test/regress/cli/regress0/proofs/bv-mul-pow2-neg-middle.smt2
@@ -0,0 +1,7 @@
+; EXPECT: unsat
+(set-logic ALL)
+(declare-fun b () (_ BitVec 4))
+(declare-fun c () (_ BitVec 4))
+(assert (= (bvmul b #b1110 c) (bvmul b c)))
+(assert (not (= (bvmul b c) #b0000)))
+(check-sat)
-- 
2.47.1

