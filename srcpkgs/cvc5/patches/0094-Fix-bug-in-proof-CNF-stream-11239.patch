From 0a89bf258e782de317dc3a3975c9b9d521504d2b Mon Sep 17 00:00:00 2001
From: Andrew Reynolds <andrew.j.reynolds@gmail.com>
Date: Tue, 1 Oct 2024 16:18:27 -0500
Subject: [PATCH 094/312] Fix bug in proof CNF stream (#11239)

This could cause us to mislabel an input clause as a theory lemma, due
to CNF stream being reentrant.

The fix follows a style used in the CNF stream already
https://github.com/cvc5/cvc5/blob/main/src/prop/cnf_stream.cpp#L210

This could potentially cause us to give unsound unsat cores when we are
proof producing, although we have never observed this.
---
 src/prop/proof_cnf_stream.cpp | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/src/prop/proof_cnf_stream.cpp b/src/prop/proof_cnf_stream.cpp
index b9e675a24..e7f61338d 100644
--- a/src/prop/proof_cnf_stream.cpp
+++ b/src/prop/proof_cnf_stream.cpp
@@ -39,10 +39,14 @@ void ProofCnfStream::convertAndAssert(TNode node,
                                       bool input,
                                       ProofGenerator* pg)
 {
+  // this method is re-entrant due to lemmas sent during preregistration of new
+  // lemmas, thus we must remember and revert d_input below.
+  bool backupInput = d_input;
   Trace("cnf") << "ProofCnfStream::convertAndAssert(" << node
                << ", negated = " << (negated ? "true" : "false")
                << ", removable = " << (removable ? "true" : "false")
-               << "), level " << userContext()->getLevel() << "\n";
+               << ", input = " << (input ? "true" : "false") << "), level "
+               << userContext()->getLevel() << "\n";
   d_cnfStream.d_removable = removable;
   d_input = input;
   if (pg)
@@ -57,7 +61,7 @@ void ProofCnfStream::convertAndAssert(TNode node,
                          "ProofCnfStream::convertAndAssert:cnf");
   }
   convertAndAssert(node, negated);
-  d_input = false;
+  d_input = backupInput;
 }
 
 void ProofCnfStream::convertAndAssert(TNode node, bool negated)
-- 
2.47.1

