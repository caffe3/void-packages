From 5e5987ad6e6d8b825cbb288dc22a080343219ce4 Mon Sep 17 00:00:00 2001
From: Andrew Reynolds <andrew.j.reynolds@gmail.com>
Date: Fri, 1 Nov 2024 13:32:27 -0500
Subject: [PATCH 147/312] Add another missing case to Eunoia implementation of
 STRING_EAGER_REDUCE (#11317)

Also collapses this to a single method which I find easier to read.
---
 proofs/eo/cpc/programs/Strings.eo | 103 +++++++++---------------------
 src/proof/alf/alf_printer.cpp     |   2 +-
 2 files changed, 31 insertions(+), 74 deletions(-)

diff --git a/proofs/eo/cpc/programs/Strings.eo b/proofs/eo/cpc/programs/Strings.eo
index 772dd60a9..14a5e5db0 100644
--- a/proofs/eo/cpc/programs/Strings.eo
+++ b/proofs/eo/cpc/programs/Strings.eo
@@ -424,74 +424,6 @@
   )
 )
 
-; program: $str_eager_reduction_contains
-; args:
-; - s (Seq U): The first argument of str.contains.
-; - t (Seq U): The second argument of str.contains.
-; return: the eager reduction predicate for (str.contains s t).
-(program $str_eager_reduction_contains ((U Type) (t (Seq U)) (r (Seq U)))
-  ((Seq U) (Seq U)) Bool
-  (
-    (($str_eager_reduction_contains t r)
-        (eo::define ((k1 (@purify ($str_first_ctn_pre t r))))
-        (eo::define ((k2 (@purify ($str_first_ctn_post t r))))
-        (ite
-          (str.contains t r)
-          (= t (str.++ k1 r k2))
-          (not (= t r)))
-        )))
-  )
-)
-
-; define: $str_eager_reduction_from_code
-; args:
-; - n Int: The argument of str.from_code.
-; return: the eager reduction predicate for (str.from_code n)
-(define $str_eager_reduction_from_code ((n Int))
-  (eo::define ((k (@purify (str.from_code n))))
-  (ite
-    (and (<= 0 n) (< n 196608))
-    (= n (str.to_code k))
-    (= k "")))
-)
-
-; define: $str_eager_reduction_to_code
-; args:
-; - s (Seq U): The argument of str.to_code.
-; return: the eager reduction predicate for (str.to_code s)
-(define $str_eager_reduction_to_code ((s String))
-  (eo::define ((t (str.to_code s)))
-  (ite
-    (= (str.len s) 1)
-    (and (>= t 0) (< t 196608))
-    (= t (eo::neg 1))))
-)
-
-; program: $str_eager_reduction_indexof
-; args:
-; - x (Seq U): The first argument to str.indexof.
-; - y (Seq U): The second argument to str.indexof.
-; - n Int: The third argument to str.indexof.
-; return: the eager reduction predicate for (str.indexof x y n).
-(program $str_eager_reduction_indexof ((U Type) (x U) (y U) (n Int))
-  (U U Int) Bool
-  (
-    (($str_eager_reduction_indexof x y n)
-        (eo::define ((t (str.indexof x y n)))
-        (and (or (= t (eo::neg 1)) (>= t n))
-             (<= t (str.len x)))))
-  )
-)
-
-; define: $str_eager_reduction_in_re
-; args:
-; - x (Seq U): The first argument to str.in_re.
-; - r RegLan: The second argument to str.in_re.
-; return: the eager reduction predicate for (str.in_re x r).
-(define $str_eager_reduction_in_re ((U Type :implicit) (x (Seq U)) (r RegLan))
-  (=> (str.in_re x r) (= (str.len x) ($str_fixed_len_re r)))
-)
-
 ; program: $mk_str_eager_reduction
 ; args:
 ; - t U: The term to process.
@@ -499,11 +431,36 @@
 (program $mk_str_eager_reduction ((U Type) (x U) (y U) (r RegLan) (n Int) (m Int))
   (U) Bool
   (
-    (($mk_str_eager_reduction (str.from_code x)) ($str_eager_reduction_from_code x))
-    (($mk_str_eager_reduction (str.to_code x)) ($str_eager_reduction_to_code x))
-    (($mk_str_eager_reduction (str.contains x y)) ($str_eager_reduction_contains x y))
-    (($mk_str_eager_reduction (str.indexof x y n)) ($str_eager_reduction_indexof x y n))
-    (($mk_str_eager_reduction (str.in_re x r)) ($str_eager_reduction_in_re x r))
+    (($mk_str_eager_reduction (str.from_code n))
+      (eo::define ((k (@purify (str.from_code n))))
+      (ite
+        (and (<= 0 n) (< n 196608))
+        (= n (str.to_code k))
+        (= k ""))))
+    (($mk_str_eager_reduction (str.to_code x))
+        (eo::define ((t (str.to_code x)))
+        (ite
+          (= (str.len x) 1)
+          (and (>= t 0) (< t 196608))
+          (= t (eo::neg 1)))))
+    (($mk_str_eager_reduction (str.contains x y))
+        (eo::define ((k1 (@purify ($str_first_ctn_pre x y))))
+        (eo::define ((k2 (@purify ($str_first_ctn_post x y))))
+        (ite
+          (str.contains x y)
+          (= x (str.++ k1 y k2))
+          (not (= x y)))
+        )))
+    (($mk_str_eager_reduction (str.indexof x y n))
+        (eo::define ((t (str.indexof x y n)))
+        (and (or (= t (eo::neg 1)) (>= t n))
+          (<= t (str.len x)))))
+    (($mk_str_eager_reduction (str.indexof_re x r n))
+        (eo::define ((t (str.indexof_re x r n)))
+        (and (or (= t (eo::neg 1)) (>= t n))
+          (<= t (str.len x)))))
+    (($mk_str_eager_reduction (str.in_re x r))
+        (=> (str.in_re x r) (= (str.len x) ($str_fixed_len_re r))))
   )
 )
 
diff --git a/src/proof/alf/alf_printer.cpp b/src/proof/alf/alf_printer.cpp
index 17724d156..72964b8ec 100644
--- a/src/proof/alf/alf_printer.cpp
+++ b/src/proof/alf/alf_printer.cpp
@@ -224,7 +224,7 @@ bool AlfPrinter::isHandled(const ProofNode* pfn) const
         return options().strings.stringsAlphaCard == String::num_codes();
       }
       return k == Kind::STRING_CONTAINS || k == Kind::STRING_INDEXOF
-             || k == Kind::STRING_IN_REGEXP;
+             || k == Kind::STRING_INDEXOF_RE || k == Kind::STRING_IN_REGEXP;
     }
     break;
     //
-- 
2.47.1

