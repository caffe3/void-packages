From 4130fefc04a3a1771ea7fa1704ebb11a2b9d95d5 Mon Sep 17 00:00:00 2001
From: Andrew Reynolds <andrew.j.reynolds@gmail.com>
Date: Wed, 4 Dec 2024 13:15:48 -0600
Subject: [PATCH 216/312] Refactoring set defaults for safe options, full
 strict proofs (#11407)

This refactors setDefaults to disable nlCov if safe options is enabled,
and to enable "full strict" proofs.

To simplify the logic, nlCov and ufSymmetryBreaker are now *true* by
default and can be disabled. This allows us to have disabling these
options indicate that further changes should not reenable them.

It also ensures certain configurations of CEGQI are enabled with full
strict proofs.
---
 src/options/arith_options.toml |  2 +-
 src/options/uf_options.toml    |  2 +-
 src/smt/set_defaults.cpp       | 89 ++++++++++++++++++++++------------
 3 files changed, 61 insertions(+), 32 deletions(-)

diff --git a/src/options/arith_options.toml b/src/options/arith_options.toml
index 66514228c..172e68f43 100644
--- a/src/options/arith_options.toml
+++ b/src/options/arith_options.toml
@@ -497,7 +497,7 @@ name   = "Arithmetic Theory"
   category   = "regular"
   long       = "nl-cov"
   type       = "bool"
-  default    = "false"
+  default    = "true"
   help       = "whether to use the cylindrical algebraic coverings solver for non-linear arithmetic"
 
 [[option]]
diff --git a/src/options/uf_options.toml b/src/options/uf_options.toml
index b040e9b45..cab1cf76d 100644
--- a/src/options/uf_options.toml
+++ b/src/options/uf_options.toml
@@ -6,7 +6,7 @@ name   = "Uninterpreted Functions Theory"
   category   = "expert"
   long       = "symmetry-breaker"
   type       = "bool"
-  default    = "false"
+  default    = "true"
   help       = "use UF symmetry breaker (Deharbe et al., CADE 2011)"
 
 [[option]]
diff --git a/src/smt/set_defaults.cpp b/src/smt/set_defaults.cpp
index 12f3b9ec4..dd2c860cf 100644
--- a/src/smt/set_defaults.cpp
+++ b/src/smt/set_defaults.cpp
@@ -51,6 +51,20 @@ using namespace cvc5::internal::theory;
 namespace cvc5::internal {
 namespace smt {
 
+/**
+ * Throw an option exception if domain.optName is set by the user and not the
+ * given value. Give an error message where reason is given.
+ * Note this macro should be used if the value is concrete.
+ */
+#define OPTION_EXCEPTION_IF_NOT(domain, optName, value, reason)               \
+  if (opts.write_##domain().optName##WasSetByUser                             \
+      && opts.write_##domain().optName != value)                              \
+  {                                                                           \
+    std::stringstream ss;                                                     \
+    ss << "Cannot use --" << options::domain::longName::optName << " due to " \
+       << reason << ".";                                                      \
+    throw OptionException(ss.str());                                          \
+  }
 /**
  * Set domain.optName to value due to reason. Notify if value changes.
  * Note this macro should be used if the value is concrete.
@@ -140,6 +154,9 @@ void SetDefaults::setDefaultsPre(Options& opts)
     // enabled by default later
     SET_AND_NOTIFY_IF_NOT_USER(fp, fpExp, false, "safe options");
     SET_AND_NOTIFY_IF_NOT_USER(sets, setsExp, false, "safe options");
+    // specific options that are disabled
+    OPTION_EXCEPTION_IF_NOT(arith, nlCov, false, "safe options");
+    SET_AND_NOTIFY_IF_NOT_USER(arith, nlCov, false, "safe options");
   }
   // implied options
   if (opts.smt.debugCheckModels)
@@ -307,6 +324,13 @@ void SetDefaults::setDefaultsPre(Options& opts)
                        "cadical");
       }
     }
+    // upgrade to full strict if safe options
+    if (options().base.safeOptions
+        && opts.smt.proofMode == options::ProofMode::FULL)
+    {
+      SET_AND_NOTIFY_IF_NOT_USER(
+          smt, proofMode, options::ProofMode::FULL_STRICT, "safe options");
+    }
   }
 
   // if unsat cores are disabled, then unsat cores mode should be OFF. Similarly
@@ -660,8 +684,10 @@ void SetDefaults::setDefaultsPost(const LogicInfo& logic, Options& opts) const
     }
   }
 
-  // by default, symmetry breaker is on only for non-incremental QF_UF
-  if (!opts.uf.ufSymmetryBreakerWasSetByUser)
+  // By default, symmetry breaker is on only for non-incremental QF_UF.
+  // Note that if ufSymmetryBreaker is already set to false, we do not reenable
+  // it.
+  if (!opts.uf.ufSymmetryBreakerWasSetByUser && opts.uf.ufSymmetryBreaker)
   {
     // Only applies to non-incremental QF_UF.
     bool qf_uf_noinc = logic.isPure(THEORY_UF) && !logic.isQuantified()
@@ -671,8 +697,7 @@ void SetDefaults::setDefaultsPost(const LogicInfo& logic, Options& opts) const
     // presolve.
     // We also disable it by default if safe unsat cores are enabled, or if
     // the proof mode is FULL_STRICT.
-    bool val = qf_uf_noinc && !safeUnsatCores(opts)
-               && opts.smt.proofMode != options::ProofMode::FULL_STRICT;
+    bool val = qf_uf_noinc && !safeUnsatCores(opts);
     SET_AND_NOTIFY_VAL_SYM(uf, ufSymmetryBreaker, val, "logic and options");
   }
 
@@ -912,45 +937,40 @@ void SetDefaults::setDefaultsPost(const LogicInfo& logic, Options& opts) const
         "any theory other than UF. ");
   }
 
-#ifdef CVC5_USE_POLY
-  if (logic == LogicInfo("QF_UFNRA"))
+  // Note that if nlCov is already set to false, we do not reenable it.
+  if (opts.arith.nlCov)
   {
-    if (!opts.arith.nlCov && !opts.arith.nlCovWasSetByUser)
+#ifdef CVC5_USE_POLY
+    if (logic == LogicInfo("QF_UFNRA"))
     {
-      SET_AND_NOTIFY(arith, nlCov, true, "QF_UFNRA");
+      // use only light nlExt techniques if we are using nlCov
       SET_AND_NOTIFY_IF_NOT_USER_VAL_SYM(
           arith, nlExt, options::NlExtMode::LIGHT, "QF_UFNRA");
     }
-  }
-  else if (logic.isQuantified() && logic.isTheoryEnabled(theory::THEORY_ARITH)
-           && logic.areRealsUsed() && !logic.areIntegersUsed()
-           && !logic.areTranscendentalsUsed())
-  {
-    if (!opts.arith.nlCov && !opts.arith.nlCovWasSetByUser)
+    else if (logic.isQuantified() && logic.isTheoryEnabled(theory::THEORY_ARITH)
+             && logic.areRealsUsed() && !logic.areIntegersUsed()
+             && !logic.areTranscendentalsUsed())
     {
-      SET_AND_NOTIFY(arith, nlCov, true, "logic with reals");
+      // use only light nlExt techniques if we are using nlCov
       SET_AND_NOTIFY_IF_NOT_USER_VAL_SYM(
           arith, nlExt, options::NlExtMode::LIGHT, "logic with reals");
     }
-  }
-#else
-  if (opts.arith.nlCov)
-  {
-    if (opts.arith.nlCovWasSetByUser)
-    {
-      std::stringstream ss;
-      ss << "Cannot use --" << options::arith::longName::nlCov
-         << " without configuring with --poly.";
-      throw OptionException(ss.str());
-    }
     else
     {
-      SET_AND_NOTIFY(arith, nlCov, false, "no support for libpoly");
-      SET_AND_NOTIFY_VAL_SYM(
-          arith, nlExt, options::NlExtMode::FULL, "no support for libpoly");
+      SET_AND_NOTIFY_IF_NOT_USER(
+          arith,
+          nlCov,
+          false,
+          "logic without reals, or involving integers or quantifiers");
     }
-  }
+#else
+    // must set to false if libpoly is not enabled
+    OPTION_EXCEPTION_IF_NOT(arith, nlCov, false, "configuring without --poly");
+    SET_AND_NOTIFY(arith, nlCov, false, "no support for libpoly");
+    SET_AND_NOTIFY_IF_NOT_USER_VAL_SYM(
+        arith, nlExt, options::NlExtMode::FULL, "no support for libpoly");
 #endif
+  }
   if (logic.isTheoryEnabled(theory::THEORY_ARITH) && logic.areTranscendentalsUsed())
   {
     SET_AND_NOTIFY_IF_NOT_USER_VAL_SYM(
@@ -1086,6 +1106,15 @@ bool SetDefaults::incompatibleWithProofs(Options& opts,
     reason << "lemma inprocessing";
     return true;
   }
+  if (opts.smt.proofMode == options::ProofMode::FULL_STRICT)
+  {
+    // symmetry breaking does not have proof support
+    SET_AND_NOTIFY_VAL_SYM(uf, ufSymmetryBreaker, false, "full strict proofs");
+    // CEGQI with deltas and infinities is not supported
+    SET_AND_NOTIFY(quantifiers, cegqiMidpoint, true, "full strict proofs");
+    SET_AND_NOTIFY(quantifiers, cegqiUseInfInt, false, "full strict proofs");
+    SET_AND_NOTIFY(quantifiers, cegqiUseInfReal, false, "full strict proofs");
+  }
   return false;
 }
 
-- 
2.47.1

